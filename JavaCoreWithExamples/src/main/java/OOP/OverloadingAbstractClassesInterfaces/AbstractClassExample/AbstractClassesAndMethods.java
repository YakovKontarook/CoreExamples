package OOP.OverloadingAbstractClassesInterfaces.AbstractClassExample;
/*
    В классе где метод объявлен абстрактным его реализация не требуется.
    Если в классе есть абстрактные методы, то класс следует объявить абстрактным.
    При расширении абстрактного класса все его абстрактные методы необходимо определить или подкласс токже объявить абстрактным
    Нельзя создавать объекты абстрактных классов, однако можно объявлять объектные переменные.

//    Часто при проектировании иерахии классов верхние классы иерархии становятся все более и более абстрактными, так что
//реализовывать некоторые методы в них не имеет никакого смысла.class
//    Однако удалить их из класса нельзя, так как при дальнейшем использовании базовых объектных ссылок на объекты производных
//классов необходим доступ к переопределенным методам, а он возможен только при наличии их в них метода с такой же
//сигнатурой как в базовом классе
//
//    В таком случае метод следует объявить абстрактным
*/
public class AbstractClassesAndMethods {

}

abstract class Course {
    public abstract String getInfo();
}

class BaseCourse extends Course {
    @Override
    public String getInfo() {
        return "Base course"; // определяем метод
    }
}

class OptionalCourse extends Course {
    @Override
    public String getInfo() {
        return "Optional course";
    }
}